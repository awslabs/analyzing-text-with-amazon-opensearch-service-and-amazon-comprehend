AWSTemplateFormatVersion: '2010-09-09'

Description: >
    "(%%SOLUTION_ID%%) - Text-analysis-with-amazon-opensearch-service-and-amazon-comprehend:
    - Example solution template. Template Version %%VERSION%%"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Basic Configuration"
        Parameters:
          - DomainName
          - InstanceType
          - InstanceCount
          - EnableVPC
          - IPToAccessKibanaDashboard
          - APIGatewayAuthorizationType
      -
        Label:
          default: "OpenSearch Service VPC"
        Parameters:
          - VpcCidrBlock
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
      -
        Label:
          default: "OpenSearch Service Encryption"
        Parameters:
          - EnableEncryptionAtRest
          - EnableNodeToNodeEncryption
      -
        Label:
          default: "OpenSearch Service EBS"
        Parameters:
          - OpenSearchServiceEnableEBS
          - EBSVolumeType
          - EBSVolumeSizeInGB
      -
        Label:
          default: "OpenSearch Service ClusterConfig"
        Parameters:
          - EnableDedicatedMaster
          - DedicatedMasterCount
          - DedicatedMasterType
          - EnableZoneAwareness
      - Label:
          default: "Optional"
        Parameters:
          - Stage
          - OpenSearchServiceRoleExists

Mappings:
  Send:
    AnonymousUsage:
      Data: "Yes"
  Function:
    ComprehendOpenSearchServiceLambdaFunction:
      S3Bucket: %%BUCKET_NAME%%
      S3Key: %%SOLUTION_NAME%%/%%VERSION%%/%%SOLUTION_NAME%%.jar

Parameters:
  DomainName:
    Description: Domain name for OpenSearch Service
    Type: String
    AllowedPattern: "^[a-z0-9-]*$"
    MaxLength: 28
    ConstraintDescription: "The name must start with a lowercase letter and must be between 3 and 28 characters.
        Valid characters are a-z (lowercase only), 0-9, and - (hyphen). Must have length less than or equal to 28"
  InstanceType:
    Description: "Instance type for Amazon OpenSearch Service domain. https://aws.amazon.com/elasticsearch-service/pricing/"
    Type: String
    AllowedPattern: "^[a-z0-9]{2}\\.[a-z0-9]+\\.elasticsearch$"
    Default: 'm4.large.elasticsearch'
  InstanceCount:
    Description: The number of instances for the OpenSearch Service domain.
    Type: Number
    Default: 2
    MinValue: 2
  EnableVPC:
    Description: Enable or disable VPC for lambda & OpenSearch Service
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
  IPToAccessKibanaDashboard:
    Description: The ip address or cidr you want to grant access to OpenSearch Service domain. Note this won't be used if you enabled VPC.
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))?$"
  APIGatewayAuthorizationType:
    Description: Select the way for API Gateway Authorization
    Type: String
    Default: 'NONE'
    AllowedValues: ['NONE', 'AWS_IAM']
  # OpenSearch Service VPC
  VpcCidrBlock:
    Description: CidrBlock for VPC
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
  PublicSubnet01Block:
    Description: CidrBlock for public subnet 1
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
  PublicSubnet02Block:
    Description: CidrBlock for public subnet 2
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
  PrivateSubnet01Block:
    Description: CidrBlock for private subnet 1
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
  PrivateSubnet02Block:
    Description: CidrBlock for private subnet 2
    Type: String
    Default: 10.0.3.0/24
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
  # OpenSearch Service Encryption
  EnableEncryptionAtRest:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  EnableNodeToNodeEncryption:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  # OpenSearch Service EBS
  OpenSearchServiceEnableEBS:
    Description: Enable or disable EBS storage type for OpenSearch Service
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  EBSVolumeType:
    Description: OpenSearch Service EBS volume type
    Type: String
    Default: 'standard'
    AllowedValues: ['standard', 'gp2', 'io1', 'st1', 'sc1']
  EBSVolumeSizeInGB:
    Description: OpenSearch Service EBS storage size per node.
    Type: Number
    Default: 10
    MaxValue: 3584
    MinValue: 10
    ConstraintDescription: "Volume size must be an integer between 10 and 3584."
  # OpenSearch Service ClusterConfig
  EnableDedicatedMaster:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  DedicatedMasterCount:
    Type: Number
    Default: 3
  DedicatedMasterType:
    Type: String
    AllowedPattern: "^[a-z0-9]{2}\\.[a-z0-9]+\\.elasticsearch$"
    Default: 'm4.large.elasticsearch'
  EnableZoneAwareness:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
  # Optional
  Stage:
    Description: The stage name of API Gateway
    Type: String
    Default: 'prod'
    AllowedPattern: "^[a-zA-Z0-9_]*$"
    ConstraintDescription: "The name must contain only a-zA-Z0-9_"
  OpenSearchServiceRoleExists:
    Description: Choose whether ServiceLinkedRole for OpenSearch Service VPC access already exists
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']

Conditions:
  IsVPCEnabled:
    Fn::Equals:
      - Ref: EnableVPC
      - 'true'
  IsEBSEnabled:
    Fn::Equals:
      - Ref: OpenSearchServiceEnableEBS
      - 'true'
  ServiceRoleNotExists:
    Fn::Equals:
      - Ref: OpenSearchServiceRoleExists
      - 'false'

Outputs:
  ExampleProxyAccessRoleArn:
    Description: 'IAM Role to invoke APIGateway'
    Value:
      !GetAtt ComprehendOpenSearchServiceAPIGatewayIAMRole.Arn
  ProxyAccessPolicyArn:
    Description: 'IAM managed policy to access proxy API'
    Value:
      Ref: ComprehendOpenSearchServiceAPIGatewayAccessPolicy
  ProxyEndpoint:
    Description: 'URL of OpenSearch Service domain proxy endpoint'
    Value:
      Fn::Sub: "https://${ComprehendOpenSearchServiceProxyAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  OpenSearchServiceEndpoint:
    Description: 'OpenSearch Service endpoint'
    Value:
      Fn::Join:
        - ''
        - - 'https://'
          - !GetAtt 'ComprehendOpenSearchServiceDomain.DomainEndpoint'
  KibanaDashboardURL:
    Description: 'URL to access Kibana dashboard'
    Value:
      Fn::Join:
        - ''
        - - 'https://'
          - !GetAtt 'ComprehendOpenSearchServiceDomain.DomainEndpoint'
          - '/_plugin/kibana'

Resources:
  ComprehendOpenSearchServiceProxyAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "ComprehendOpenSearchServiceProxyAPI"
      Description: 'Comprehend OpenSearch Service Proxy rest API'
      Parameters:
        endpointConfigurationTypes: REGIONAL
      Body:
        swagger: "2.0"
        info:
          version: "1.0"
          title: "Proxy Integration With Lambda"
        basePath: "/prod"
        schemes:
          - "https"

  # API Gateway Resource, Validator & Method
  ComprehendOpenSearchServiceProxyAPIResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt ComprehendOpenSearchServiceProxyAPI.RootResourceId
      RestApiId: !Ref ComprehendOpenSearchServiceProxyAPI
      PathPart: '{proxy+}'
  ComprehendOpenSearchServiceProxyAPIRequestValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      RestApiId: !Ref ComprehendOpenSearchServiceProxyAPI
      ValidateRequestBody: true
      ValidateRequestParameters: true
  ComprehendOpenSearchServiceProxyAPIMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: !Ref APIGatewayAuthorizationType
      HttpMethod: ANY
      ResourceId: !Ref ComprehendOpenSearchServiceProxyAPIResource
      RestApiId: !Ref ComprehendOpenSearchServiceProxyAPI
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
        Credentials:
          Fn::GetAtt: [ComprehendOpenSearchServiceAPIGatewayExecutionRole, Arn]
        Uri:
          Fn::Sub: "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ComprehendOpenSearchServiceLambda}/invocations"

  # Deployment & Stages
  ComprehendOpenSearchServiceProxyAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W68
            reason: "Suppress AWS::ApiGateway::Deployment resources should be associated with an AWS::ApiGateway::UsagePlan warning. New CFN resources are out of scope for 9/7 rebranding launch."
    DependsOn:
      - ComprehendOpenSearchServiceProxyAPIMethod
    Properties:
      RestApiId:
        Ref: ComprehendOpenSearchServiceProxyAPI
      Description: 'Comprehend OpenSearch Service Proxy API deployment'
  ComprehendOpenSearchServiceProxyAPIProdStage:
    Type: AWS::ApiGateway::Stage
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W64
            reason: "Suppress AWS::ApiGateway::Deployment resources should be associated with an AWS::ApiGateway::UsagePlan warning. New CFN resources are out of scope for 9/7 rebranding launch."
          - id: W69
            reason: "Suppress AWS::ApiGateway::Stage should have the AccessLogSetting property defined warning. Customer can specify CloudWatch log role ARN in API Gateway settings."
    Properties:
      DeploymentId:
        Ref: ComprehendOpenSearchServiceProxyAPIDeployment
      RestApiId:
        Ref: ComprehendOpenSearchServiceProxyAPI
      StageName: {Ref: Stage}

  # IAM policy for customer to access API Gateway
  ComprehendOpenSearchServiceAPIGatewayAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: "Policy to access any sub-resources under proxy API is allowed"
    Properties:
      Description: IAM policy to access API Gateway
      PolicyDocument:
        Statement:
          - Action: ["execute-api:Invoke","execute-api:ManageConnections"]
            Effect: Allow
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ComprehendOpenSearchServiceProxyAPI}/*'
        Version: '2012-10-17'
  # IAM role for customer to access API Gateway
  ComprehendOpenSearchServiceAPIGatewayIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              AWS:
                Fn::Sub: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:root'
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Ref: ComprehendOpenSearchServiceAPIGatewayAccessPolicy
  # Role for API Gateway to access lambda
  ComprehendOpenSearchServiceAPIGatewayExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [apigateway.amazonaws.com]
        Version: '2012-10-17'
      Policies:
        - PolicyDocument:
            Statement:
              - Action: ['lambda:InvokeFunction']
                Effect: Allow
                Resource:
                  - Fn::Sub: 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${ComprehendOpenSearchServiceLambda}'
            Version: '2012-10-17'
          PolicyName: apigInvokeLambda


  # OpenSearch Service Domain
  ComprehendOpenSearchServiceDomain:
    Type: AWS::Elasticsearch::Domain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: "Name is needed to construct the domain policy, which refers to the domain arn"
    Properties:
      ElasticsearchClusterConfig:
        InstanceCount: {Ref: InstanceCount}
        InstanceType: {Ref: InstanceType}
        DedicatedMasterCount: {Ref: DedicatedMasterCount}
        DedicatedMasterEnabled: {Ref: EnableDedicatedMaster}
        DedicatedMasterType: {Ref: DedicatedMasterType}
        ZoneAwarenessEnabled: {Ref: EnableZoneAwareness}
      DomainName: {Ref: DomainName}
      ElasticsearchVersion: '6.7'
      EncryptionAtRestOptions:
        Enabled: {Ref: EnableEncryptionAtRest}
      NodeToNodeEncryptionOptions:
        Enabled: {Ref: EnableNodeToNodeEncryption}
      EBSOptions:
        EBSEnabled:
          Ref: OpenSearchServiceEnableEBS
        VolumeType:
          Fn::If:
            - IsEBSEnabled
            - Ref: EBSVolumeType
            - Ref: AWS::NoValue
        VolumeSize:
          Fn::If:
            - IsEBSEnabled
            - Ref: EBSVolumeSizeInGB
            - Ref: AWS::NoValue
      SnapshotOptions:
        AutomatedSnapshotStartHour: 0
      AccessPolicies:
        Fn::If:
          - IsVPCEnabled
          - Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  AWS:
                    - Fn::Sub: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ComprehendOpenSearchServiceLambdaRole}'
                Action: 'es:*'
                Resource:
                  Fn::Sub: 'arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/${DomainName}/*'
          - Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal:
                  AWS:
                    Fn::Sub: 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${ComprehendOpenSearchServiceLambdaRole}'
                Action: 'es:*'
                Resource:
                  Fn::Sub: 'arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/${DomainName}/*'
              - Sid: ""
                Effect: Allow
                Principal:
                  AWS: '*'
                Action: 'es:*'
                Resource:
                  Fn::Sub: 'arn:${AWS::Partition}:es:${AWS::Region}:${AWS::AccountId}:domain/${DomainName}/*'
                Condition:
                  IpAddress:
                    aws:SourceIp: {Ref: IPToAccessKibanaDashboard}
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
      VPCOptions:
        Fn::If:
          - IsVPCEnabled
          - SecurityGroupIds:
              - Ref: ComprehendOpenSearchServiceSecurityGroup
            SubnetIds:
              - Ref: ComprehendOpenSearchServicePublicSubnet01
              - Ref: ComprehendOpenSearchServicePublicSubnet02
          - Ref: AWS::NoValue
  OpenSearchServiceLinkedRole:
    Type: AWS::IAM::ServiceLinkedRole
    Condition: ServiceRoleNotExists
    Properties:
      AWSServiceName: "es.amazonaws.com"
      Description: "Enable a service-linked role to give Amazon OpenSearch Service permissions to access VPC"

  ComprehendOpenSearchServiceLambda:
    Properties:
      Code:
        S3Bucket: !Join ['-', [!FindInMap [ Function, ComprehendOpenSearchServiceLambdaFunction, S3Bucket], !Ref 'AWS::Region']]
        S3Key: !FindInMap [ Function, ComprehendOpenSearchServiceLambdaFunction, S3Key]
      Handler: 'com.amazonaws.comprehend.esproxy.lambda.OpenSearchServiceProxyRequestHandler::handleRequest'
      Environment:
        Variables:
          OpenSearchServiceDomainEndpoint:
            !GetAtt 'ComprehendOpenSearchServiceDomain.DomainEndpoint'
          Region:
            Ref: 'AWS::Region'
      MemorySize: 512
      Role:
        Fn::GetAtt: [ComprehendOpenSearchServiceLambdaRole, Arn]
      Runtime: java8
      Timeout: 300
      VpcConfig:
        Fn::If:
          - IsVPCEnabled
          - SecurityGroupIds: [{Ref: ProxyServiceSecurityGroup}]
            SubnetIds:
              - Ref: ComprehendOpenSearchServicePrivateSubnet01
              - Ref: ComprehendOpenSearchServicePrivateSubnet02
          - Ref: 'AWS::NoValue'
    Type: AWS::Lambda::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W58
            reason: "Lambda functions require permission to write CloudWatch logs. Added policy for permission defined in ComprehendOpenSearchServiceLambdaRole's ManagedPolicyArns"
          - id: W92
            reason: "Suppress Lambda functions should define ReservedConcurrentExecutions to reserve simultaneous executions warning. Keeping original lambda behaviour and will revisit after 9/7 launch."
  ComprehendOpenSearchServiceLambdaRole:
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Amazon Comprehend Detect and BatchDetect APIs dont have associated resources."
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
        Version: '2012-10-17'
      ManagedPolicyArns:
        - Fn::Sub: 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
        - Fn::Sub: 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action: ['comprehend:DetectDominantLanguage',
                         'comprehend:DetectEntities',
                         'comprehend:DetectKeyPhrases',
                         'comprehend:DetectSentiment',
                         'comprehend:DetectSyntax',
                         'comprehend:BatchDetectDominantLanguage',
                         'comprehend:BatchDetectEntities',
                         'comprehend:BatchDetectKeyPhrases',
                         'comprehend:BatchDetectSentiment',
                         'comprehend:BatchDetectSyntax']
                Effect: Allow
                Resource: '*'
            Version: '2012-10-17'
          PolicyName: ComprehendOpenSearchServiceLambdaRolePolicy
    Type: AWS::IAM::Role
  ComprehendOpenSearchServiceLambdaLogGroup:
    DependsOn: ComprehendOpenSearchServiceLambda
    Properties:
      LogGroupName: {"Fn::Sub": "/aws/lambda/${ComprehendOpenSearchServiceLambda}"}
    Type: AWS::Logs::LogGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W84
            reason: "CloudWatch logs are by default encrypted (refer https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/encrypt-log-data-kms.html). KMS key ID not needed."
          - id: W86
            reason: "Suppress RetentionInDays not specified warning. Keeping original retention behavior and will revisit after 9/7 launch"
  # VPC
  ComprehendOpenSearchServiceVPC:
    Condition: IsVPCEnabled
    Properties:
      CidrBlock: {Ref: VpcCidrBlock}
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServiceVPC'
    Type: AWS::EC2::VPC
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W60
            reason: "Suppress VPC flow logs not needed warning. Retaining original VPC logs behavior and will revisit after 9/7 launch"
  # Subnet
  ComprehendOpenSearchServicePublicSubnet01:
    Condition: IsVPCEnabled
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: {Ref: PublicSubnet01Block}
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServicePublicSubnet01'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::Subnet
  ComprehendOpenSearchServicePublicSubnet02:
    Condition: IsVPCEnabled
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: {Ref: PublicSubnet02Block}
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServicePublicSubnet02'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::Subnet
  ComprehendOpenSearchServicePrivateSubnet01:
    Condition: IsVPCEnabled
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: {Ref: PrivateSubnet01Block}
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServicePrivateSubnet01'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::Subnet
  ComprehendOpenSearchServicePrivateSubnet02:
    Condition: IsVPCEnabled
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs: {Ref: 'AWS::Region'}
      CidrBlock: {Ref: PrivateSubnet02Block}
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServicePrivateSubnet02'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::Subnet
  # Elastic IP
  ComprehendOpenSearchServiceEIP01:
    Condition: IsVPCEnabled
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  ComprehendOpenSearchServiceEIP02:
    Condition: IsVPCEnabled
    Properties:
      Domain: vpc
    Type: AWS::EC2::EIP
  # Gateway
  ComprehendOpenSearchServiceInternetGateway:
    Condition: IsVPCEnabled
    Properties:
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServiceInternetGateway'
    Type: 'AWS::EC2::InternetGateway'
  ComprehendOpenSearchServiceGatewayAttachement:
    Condition: IsVPCEnabled
    Properties:
      InternetGatewayId: {Ref: ComprehendOpenSearchServiceInternetGateway}
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::VPCGatewayAttachment
  ComprehendOpenSearchServiceNATFromPublicSubnet01:
    Condition: IsVPCEnabled
    DependsOn: ComprehendOpenSearchServiceGatewayAttachement
    Properties:
      AllocationId:
        Fn::GetAtt: [ComprehendOpenSearchServiceEIP01, AllocationId]
      SubnetId: {Ref: ComprehendOpenSearchServicePublicSubnet01}
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServiceNATFromPublicSubnet01'
    Type: AWS::EC2::NatGateway
  ComprehendOpenSearchServiceNATFromPublicSubnet02:
    Condition: IsVPCEnabled
    DependsOn: ComprehendOpenSearchServiceGatewayAttachement
    Properties:
      AllocationId:
        Fn::GetAtt: [ComprehendOpenSearchServiceEIP02, AllocationId]
      SubnetId: {Ref: ComprehendOpenSearchServicePublicSubnet02}
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServiceNATFromPublicSubnet02'
    Type: AWS::EC2::NatGateway
  # RouteTable
  ComprehendOpenSearchServicePublicRouteTable:
    Condition: IsVPCEnabled
    Properties:
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServicePublicRouteTable'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::RouteTable
  ComprehendOpenSearchServicePrivateRouteTable01:
    Condition: IsVPCEnabled
    Properties:
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServicePrivateRouteTable01'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::RouteTable
  ComprehendOpenSearchServicePrivateRouteTable02:
    Condition: IsVPCEnabled
    Properties:
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServicePrivateRouteTable02'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
    Type: AWS::EC2::RouteTable
  # Route
  ComprehendOpenSearchServicePublicRouteTableIGWRoute:
    Condition: IsVPCEnabled
    DependsOn: ComprehendOpenSearchServiceGatewayAttachement
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: {Ref: ComprehendOpenSearchServiceInternetGateway}
      RouteTableId: {Ref: ComprehendOpenSearchServicePublicRouteTable}
    Type: AWS::EC2::Route
  ComprehendOpenSearchServicePrivateNATInternetRoute01:
    Condition: IsVPCEnabled
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: {Ref: ComprehendOpenSearchServiceNATFromPublicSubnet01}
      RouteTableId: {Ref: ComprehendOpenSearchServicePrivateRouteTable01}
    Type: AWS::EC2::Route
  ComprehendOpenSearchServicePrivateNATInternetRoute02:
    Condition: IsVPCEnabled
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: {Ref: ComprehendOpenSearchServiceNATFromPublicSubnet02}
      RouteTableId: {Ref: ComprehendOpenSearchServicePrivateRouteTable02}
    Type: AWS::EC2::Route
  # RouteTable Association
  ComprehendOpenSearchServicePublicSubnetRouteTableAssociation01:
    Condition: IsVPCEnabled
    Metadata: {Comment: Associate subnet to Public route}
    Properties:
      RouteTableId: {Ref: ComprehendOpenSearchServicePublicRouteTable}
      SubnetId: {Ref: ComprehendOpenSearchServicePublicSubnet01}
    Type: AWS::EC2::SubnetRouteTableAssociation
  ComprehendOpenSearchServicePublicSubnetRouteTableAssociation02:
    Condition: IsVPCEnabled
    Metadata: {Comment: Associate subnet to Public route}
    Properties:
      RouteTableId: {Ref: ComprehendOpenSearchServicePublicRouteTable}
      SubnetId: {Ref: ComprehendOpenSearchServicePublicSubnet02}
    Type: AWS::EC2::SubnetRouteTableAssociation
  ComprehendOpenSearchServicePrivateSubnetRouteTableAssociation01:
    Condition: IsVPCEnabled
    Metadata: {Comment: Associate subnet to private route}
    Properties:
      RouteTableId: {Ref: ComprehendOpenSearchServicePrivateRouteTable01}
      SubnetId: {Ref: ComprehendOpenSearchServicePrivateSubnet01}
    Type: AWS::EC2::SubnetRouteTableAssociation
  ComprehendOpenSearchServicePrivateSubnetRouteTableAssociation02:
    Condition: IsVPCEnabled
    Metadata: {Comment: Associate subnet to private route}
    Properties:
      RouteTableId: {Ref: ComprehendOpenSearchServicePrivateRouteTable02}
      SubnetId: {Ref: ComprehendOpenSearchServicePrivateSubnet02}
    Type: AWS::EC2::SubnetRouteTableAssociation
  # Security Group
  ComprehendOpenSearchServiceSecurityGroup:
    Condition: IsVPCEnabled
    Properties:
      GroupDescription: Allow HTTPs inbound traffic and all outbound access
      Tags:
        - Key: Name
          Value: 'ComprehendOpenSearchServiceSecurityGroup'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: "ingress traffic on port 443 from vpc cidr blocker"
          CidrIp: {Ref: VpcCidrBlock}
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: "egress traffic on port 443 from vpc cidr blocker"
          CidrIp: {Ref: VpcCidrBlock}
    Type: AWS::EC2::SecurityGroup
  ProxyServiceSecurityGroup:
    Condition: IsVPCEnabled
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: "this is security group for lambda function to access Amazon Comprehend. Egress to internet should be permitted."
    Properties:
      GroupDescription: Allow HTTPs inbound traffic and all outbound access
      Tags:
        - Key: Name
          Value: 'ProxyServiceSecurityGroup'
      VpcId: {Ref: ComprehendOpenSearchServiceVPC}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: "ingress traffic on port 443 from vpc cidr blocker"
          CidrIp: {Ref: VpcCidrBlock}
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          Description: "egress traffic on port 443 to internet to access Amazon Comprehend"
          CidrIp: 0.0.0.0/0
    Type: AWS::EC2::SecurityGroup
